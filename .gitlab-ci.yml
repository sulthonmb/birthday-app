
image: tmaier/docker-compose:latest

services:
  - docker:dind

# before_script:
#   - docker info
#   - docker-compose --version

stages:
  # - test
  # - build-stage
  - deploy-stage
  # - build-docker-compose

# Test:
#   stage: test
#   script: 
#     - docker-compose -f docker-compose.test.yml build --pull
#     - docker-compose -f docker-compose.test.yml up --abort-on-container-exit
#     - docker-compose -f docker-compose.test.yml down

# Build Stage:
#   stage: build-stage
#   when: manual
#   before_script:
#     - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
#     - export APP_IMAGE=$IMAGE:app
#     - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
#   script:
#     - docker pull $APP_IMAGE || true
#     - docker-compose -f docker-compose.prod.yml build --pull
#     - docker push $APP_IMAGE
  
Deploy Stage:
  stage: deploy-stage  
  before_script:
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
    - export APP_IMAGE=$IMAGE:app
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker-compose -f docker-compose.prod.yml -H "ssh://root@$SERVER_STAGING_IP" down --remove-orphans
    - docker-compose -f docker-compose.prod.yml -H "ssh://root@$SERVER_STAGING_IP" pull $APP_IMAGE
    - docker-compose -f docker-compose.prod.yml -H "ssh://root@$SERVER_STAGING_IP" up -d $APP_IMAGE
# Build Docker Compose:
#   stage: build-docker-compose
#   before_script:
#     - apk add --no-cache py-pip
#     - pip install docker-compose
#   script: 
#     - docker-compose build
#     - docker-compose down
#     - docker-compose up -d --force-recreate