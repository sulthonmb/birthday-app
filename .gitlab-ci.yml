
image: tmaier/docker-compose:latest

services:
  - docker:dind

before_script:
  - docker info
  - docker-compose --version

stages:
  # - test
  - build-stage
  # - build-docker-compose

# Test:
#   stage: test
#   script: 
#     - docker-compose -f docker-compose.test.yml build --pull
#     - docker-compose -f docker-compose.test.yml up --abort-on-container-exit
#     - docker-compose -f docker-compose.test.yml down

Build Stage:
  stage: build-stage
  # when: manual
  # before_script:
  #   - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  #   - export APP_IMAGE=$IMAGE:app
  #   - export POSTGRES_IMAGE=$IMAGE:postgres
  #   - export REDIS_IMAGE=$IMAGE:redis
  #   - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    # - docker pull $APP_IMAGE || true
    # - docker pull $POSTGRES_IMAGE || true
    # - docker pull $REDIS_IMAGE || true
    - docker-compose -f docker-compose.prod.yml up --build
    # - docker push $APP_IMAGE
    # - docker push $POSTGRES_IMAGE
    # - docker push $REDIS_IMAGE
    # - docker stack deploy preprod -c  docker-compose.prod.yml --with-registry-auth

# Build Docker Compose:
#   stage: build-docker-compose
#   before_script:
#     - apk add --no-cache py-pip
#     - pip install docker-compose
#   script: 
#     - docker-compose build
#     - docker-compose down
#     - docker-compose up -d --force-recreate